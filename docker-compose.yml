version: "3.9"

services:
  postgres:
    image: postgis/postgis:16-3.4-alpine
    container_name: mudmaps-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./db/migrations:/docker-entrypoint-initdb.d/migrations:ro

  redis:
    image: redis:7-alpine
    container_name: mudmaps-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # NEW: Self-hosted OSRM routing engine
  osrm:
    image: osrm/osrm-backend
    container_name: mudmaps-osrm
    volumes:
      - ./osrm-data:/data:ro
    command: osrm-routed --algorithm mld /data/region.osrm --max-table-size 10000
    ports:
      - "5000:5000"
    restart: unless-stopped
    # Resource limits - OSRM needs memory
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backend:
    build:
      context: ./backend
    container_name: mudmaps-backend
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PORT: 3000
      CORS_ORIGIN: ${CORS_ORIGIN}
      HOST_PORT: ${HOST_PORT}
      OSRM_BASE: http://osrm:5000  # Point to local OSRM
    depends_on:
      - postgres
      - osrm
    ports:
      - "3001:3000"

  tcp-listener:
    build:
      context: ./tcp-listener
    container_name: mudmaps-tcp-listener
    environment:
      LISTENER_PORT: ${LISTENER_PORT}
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    ports:
      - "5500:${LISTENER_PORT}"

  worker:
    build:
      context: ./worker
    container_name: mudmaps-worker-1
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-2:
    build:
      context: ./worker
    container_name: mudmaps-worker-2
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-3:
    build:
      context: ./worker
    container_name: mudmaps-worker-3
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-4:
    build:
      context: ./worker
    container_name: mudmaps-worker-4
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-5:
    build:
      context: ./worker
    container_name: mudmaps-worker-5
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-6:
    build:
      context: ./worker
    container_name: mudmaps-worker-6
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-7:
    build:
      context: ./worker
    container_name: mudmaps-worker-7
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-8:
    build:
      context: ./worker
    container_name: mudmaps-worker-8
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-9:
    build:
      context: ./worker
    container_name: mudmaps-worker-9
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  worker-10:
    build:
      context: ./worker
    container_name: mudmaps-worker-10
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      OSRM_BASE: http://osrm:5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - osrm
      - redis
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    container_name: mudmaps-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro

volumes:
  db-data: